
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Nov 27 16:43:43 BRST 2019
//----------------------------------------------------

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Nov 27 16:43:43 BRST 2019
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\043\000\002\002\004\000\002\002\006\000\002\003" +
    "\004\000\002\003\003\000\002\003\004\000\002\003\003" +
    "\000\002\003\004\000\002\003\003\000\002\003\004\000" +
    "\002\003\003\000\002\003\004\000\002\003\003\000\002" +
    "\003\004\000\002\003\003\000\002\003\004\000\002\003" +
    "\003\000\002\004\005\000\002\004\007\000\002\006\006" +
    "\000\002\006\010\000\002\006\010\000\002\006\006\000" +
    "\002\005\013\000\002\005\020\000\002\013\010\000\002" +
    "\011\003\000\002\011\005\000\002\011\005\000\002\011" +
    "\005\000\002\011\005\000\002\011\005\000\002\012\006" +
    "\000\002\012\006\000\002\007\013\000\002\014\011" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\131\000\004\026\004\001\002\000\004\031\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\030\010\001\002\000\020\006\026\010\014\013" +
    "\015\017\027\031\022\033\024\034\017\001\002\000\026" +
    "\002\ufff4\006\ufff4\010\ufff4\013\ufff4\017\ufff4\020\ufff4\031" +
    "\ufff4\033\ufff4\034\ufff4\035\ufff4\001\002\000\026\002\ufff2" +
    "\006\ufff2\010\ufff2\013\ufff2\017\ufff2\020\ufff2\031\ufff2\033" +
    "\ufff2\034\ufff2\035\ufff2\001\002\000\026\002\ufffc\006\ufffc" +
    "\010\ufffc\013\ufffc\017\ufffc\020\ufffc\031\ufffc\033\ufffc\034" +
    "\ufffc\035\ufffc\001\002\000\004\024\117\001\002\000\004" +
    "\024\107\001\002\000\026\002\ufffe\006\ufffe\010\ufffe\013" +
    "\ufffe\017\ufffe\020\ufffe\031\ufffe\033\ufffe\034\ufffe\035\ufffe" +
    "\001\002\000\020\006\026\010\014\013\015\017\027\031" +
    "\022\033\024\034\017\001\002\000\026\002\ufff6\006\ufff6" +
    "\010\ufff6\013\ufff6\017\ufff6\020\ufff6\031\ufff6\033\ufff6\034" +
    "\ufff6\035\ufff6\001\002\000\026\002\ufff8\006\ufff8\010\ufff8" +
    "\013\ufff8\017\ufff8\020\ufff8\031\ufff8\033\ufff8\034\ufff8\035" +
    "\ufff8\001\002\000\004\014\055\001\002\000\022\002\000" +
    "\006\026\010\014\013\015\017\027\031\022\033\024\034" +
    "\017\001\002\000\004\024\050\001\002\000\026\002\ufffa" +
    "\006\ufffa\010\ufffa\013\ufffa\017\ufffa\020\ufffa\031\ufffa\033" +
    "\ufffa\034\ufffa\035\ufffa\001\002\000\004\031\043\001\002" +
    "\000\020\006\026\010\014\013\015\017\027\031\022\033" +
    "\024\034\017\001\002\000\022\006\026\010\014\013\015" +
    "\017\027\020\035\031\022\033\024\034\017\001\002\000" +
    "\026\002\ufff5\006\ufff5\010\ufff5\013\ufff5\017\ufff5\020\ufff5" +
    "\031\ufff5\033\ufff5\034\ufff5\035\ufff5\001\002\000\026\002" +
    "\ufff3\006\ufff3\010\ufff3\013\ufff3\017\ufff3\020\ufff3\031\ufff3" +
    "\033\ufff3\034\ufff3\035\ufff3\001\002\000\026\002\ufffd\006" +
    "\ufffd\010\ufffd\013\ufffd\017\ufffd\020\ufffd\031\ufffd\033\ufffd" +
    "\034\ufffd\035\ufffd\001\002\000\026\002\uffff\006\uffff\010" +
    "\uffff\013\uffff\017\uffff\020\uffff\031\uffff\033\uffff\034\uffff" +
    "\035\uffff\001\002\000\006\027\041\030\042\001\002\000" +
    "\026\002\ufff7\006\ufff7\010\ufff7\013\ufff7\017\ufff7\020\ufff7" +
    "\031\ufff7\033\ufff7\034\ufff7\035\ufff7\001\002\000\026\002" +
    "\ufff9\006\ufff9\010\ufff9\013\ufff9\017\ufff9\020\ufff9\031\ufff9" +
    "\033\ufff9\034\ufff9\035\ufff9\001\002\000\026\002\ufffb\006" +
    "\ufffb\010\ufffb\013\ufffb\017\ufffb\020\ufffb\031\ufffb\033\ufffb" +
    "\034\ufffb\035\ufffb\001\002\000\026\002\uffe1\006\uffe1\010" +
    "\uffe1\013\uffe1\017\uffe1\020\uffe1\031\uffe1\033\uffe1\034\uffe1" +
    "\035\uffe1\001\002\000\026\002\uffe2\006\uffe2\010\uffe2\013" +
    "\uffe2\017\uffe2\020\uffe2\031\uffe2\033\uffe2\034\uffe2\035\uffe2" +
    "\001\002\000\006\014\045\030\044\001\002\000\026\002" +
    "\ufff1\006\ufff1\010\ufff1\013\ufff1\017\ufff1\020\ufff1\031\ufff1" +
    "\033\ufff1\034\ufff1\035\ufff1\001\002\000\004\042\046\001" +
    "\002\000\004\030\047\001\002\000\026\002\ufff0\006\ufff0" +
    "\010\ufff0\013\ufff0\017\ufff0\020\ufff0\031\ufff0\033\ufff0\034" +
    "\ufff0\035\ufff0\001\002\000\004\031\051\001\002\000\004" +
    "\031\052\001\002\000\004\025\053\001\002\000\004\030" +
    "\054\001\002\000\026\002\uffe9\006\uffe9\010\uffe9\013\uffe9" +
    "\017\uffe9\020\uffe9\031\uffe9\033\uffe9\034\uffe9\035\uffe9\001" +
    "\002\000\006\031\057\042\056\001\002\000\004\030\066" +
    "\001\002\000\006\030\060\036\061\001\002\000\026\002" +
    "\uffef\006\uffef\010\uffef\013\uffef\017\uffef\020\uffef\031\uffef" +
    "\033\uffef\034\uffef\035\uffef\001\002\000\006\031\063\042" +
    "\062\001\002\000\004\030\065\001\002\000\004\030\064" +
    "\001\002\000\026\002\uffee\006\uffee\010\uffee\013\uffee\017" +
    "\uffee\020\uffee\031\uffee\033\uffee\034\uffee\035\uffee\001\002" +
    "\000\026\002\uffed\006\uffed\010\uffed\013\uffed\017\uffed\020" +
    "\uffed\031\uffed\033\uffed\034\uffed\035\uffed\001\002\000\026" +
    "\002\uffec\006\uffec\010\uffec\013\uffec\017\uffec\020\uffec\031" +
    "\uffec\033\uffec\034\uffec\035\uffec\001\002\000\022\006\026" +
    "\010\014\013\015\017\027\031\022\033\024\034\017\035" +
    "\070\001\002\000\004\024\071\001\002\000\010\023\074" +
    "\031\075\042\072\001\002\000\004\022\104\001\002\000" +
    "\004\025\102\001\002\000\004\025\uffe8\001\002\000\004" +
    "\022\076\001\002\000\010\023\100\031\101\042\077\001" +
    "\002\000\004\025\uffe4\001\002\000\004\025\uffe5\001\002" +
    "\000\004\025\uffe3\001\002\000\004\030\103\001\002\000" +
    "\026\002\uffdf\006\uffdf\010\uffdf\013\uffdf\017\uffdf\020\uffdf" +
    "\031\uffdf\033\uffdf\034\uffdf\035\uffdf\001\002\000\006\031" +
    "\106\042\105\001\002\000\004\025\uffe7\001\002\000\004" +
    "\025\uffe6\001\002\000\010\023\074\031\075\042\072\001" +
    "\002\000\004\025\111\001\002\000\004\012\112\001\002" +
    "\000\004\017\113\001\002\000\020\006\026\010\014\013" +
    "\015\017\027\031\022\033\024\034\017\001\002\000\022" +
    "\006\026\010\014\013\015\017\027\020\115\031\022\033" +
    "\024\034\017\001\002\000\004\030\116\001\002\000\026" +
    "\002\uffe0\006\uffe0\010\uffe0\013\uffe0\017\uffe0\020\uffe0\031" +
    "\uffe0\033\uffe0\034\uffe0\035\uffe0\001\002\000\010\023\074" +
    "\031\075\042\072\001\002\000\004\025\121\001\002\000" +
    "\004\032\122\001\002\000\004\017\123\001\002\000\020" +
    "\006\026\010\014\013\015\017\027\031\022\033\024\034" +
    "\017\001\002\000\022\006\026\010\014\013\015\017\027" +
    "\020\125\031\022\033\024\034\017\001\002\000\004\030" +
    "\126\001\002\000\030\002\uffeb\006\uffeb\010\uffeb\011\127" +
    "\013\uffeb\017\uffeb\020\uffeb\031\uffeb\033\uffeb\034\uffeb\035" +
    "\uffeb\001\002\000\004\017\130\001\002\000\020\006\026" +
    "\010\014\013\015\017\027\031\022\033\024\034\017\001" +
    "\002\000\022\006\026\010\014\013\015\017\027\020\132" +
    "\031\022\033\024\034\017\001\002\000\004\030\133\001" +
    "\002\000\026\002\uffea\006\uffea\010\uffea\013\uffea\017\uffea" +
    "\020\uffea\031\uffea\033\uffea\034\uffea\035\uffea\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\131\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\003\022\004\015\005\020\006\012\007\010\012\024\013" +
    "\017\014\011\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\003\066\004\015\005\020\006\012" +
    "\007\010\012\024\013\017\014\011\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\004\033" +
    "\005\036\006\032\007\030\012\037\013\035\014\031\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\003\027\004\015\005\020\006\012\007\010\012" +
    "\024\013\017\014\011\001\001\000\020\004\033\005\036" +
    "\006\032\007\030\012\037\013\035\014\031\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\004\033\005\036\006\032\007\030\012" +
    "\037\013\035\014\031\001\001\000\002\001\001\000\004" +
    "\011\072\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\107\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\003\113" +
    "\004\015\005\020\006\012\007\010\012\024\013\017\014" +
    "\011\001\001\000\020\004\033\005\036\006\032\007\030" +
    "\012\037\013\035\014\031\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\117\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\003\123\004" +
    "\015\005\020\006\012\007\010\012\024\013\017\014\011" +
    "\001\001\000\020\004\033\005\036\006\032\007\030\012" +
    "\037\013\035\014\031\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\003\130\004\015\005" +
    "\020\006\012\007\010\012\024\013\017\014\011\001\001" +
    "\000\020\004\033\005\036\006\032\007\030\012\037\013" +
    "\035\014\031\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // REPEAT ::= Repeat SENTENCA Until Parenteses_a SENTENCA_BOOLEANA Parenteses_f PontoVirgula 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("REPEAT",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // WHILE ::= While Parenteses_a SENTENCA_BOOLEANA Parenteses_f Do Begin SENTENCA End PontoVirgula 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // BEGIN ::= Begin SENTENCA End Ponto 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BEGIN",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // BEGIN ::= Begin SENTENCA End PontoVirgula 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BEGIN",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SENTENCA_BOOLEANA ::= Identificador Op_relacional Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCA_BOOLEANA",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SENTENCA_BOOLEANA ::= Identificador Op_relacional Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCA_BOOLEANA",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SENTENCA_BOOLEANA ::= Identificador Op_relacional Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCA_BOOLEANA",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SENTENCA_BOOLEANA ::= Numero Op_relacional Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCA_BOOLEANA",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SENTENCA_BOOLEANA ::= Numero Op_relacional Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCA_BOOLEANA",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENTENCA_BOOLEANA ::= Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCA_BOOLEANA",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ALL ::= All Parenteses_a Identificador Identificador Parenteses_f PontoVirgula 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ALL",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // IF ::= If Parenteses_a SENTENCA_BOOLEANA Parenteses_f Then Begin SENTENCA End PontoVirgula Else Begin SENTENCA End PontoVirgula 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-13)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // IF ::= If Parenteses_a SENTENCA_BOOLEANA Parenteses_f Then Begin SENTENCA End PontoVirgula 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ATRIBUICAO ::= Identificador Igual Numero PontoVirgula 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ATRIBUICAO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ATRIBUICAO ::= Identificador Igual Identificador Soma Numero PontoVirgula 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ATRIBUICAO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ATRIBUICAO ::= Identificador Igual Identificador Soma Identificador PontoVirgula 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ATRIBUICAO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ATRIBUICAO ::= Identificador Igual Identificador PontoVirgula 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ATRIBUICAO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECLARACAO ::= T_dado Identificador Igual Numero PontoVirgula 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACAO",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DECLARACAO ::= T_dado Identificador PontoVirgula 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACAO",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCA ::= REPEAT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCA ::= SENTENCA REPEAT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCA ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCA ::= SENTENCA WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCA ::= ALL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCA ::= SENTENCA ALL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCA ::= IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCA ::= SENTENCA IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCA ::= BEGIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCA ::= SENTENCA BEGIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCA ::= ATRIBUICAO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCA ::= SENTENCA ATRIBUICAO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SENTENCA ::= DECLARACAO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // SENTENCA ::= SENTENCA DECLARACAO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= Program Identificador PontoVirgula SENTENCA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

